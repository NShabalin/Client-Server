Задание на практику

Задача: разработка кроссплатформенного ПО модели клиент-сервер для обмена сообщениями.

Постановка задачи:
Разработать кроссплатформенное (Windows 7/10, FreeBSD 13.4, не ниже, Astra Linux актуальных версий) клиент-серверное ПО на языке C/C++ для обмена сообщениями.

Требования к ПО:
    Допускается реализация консольного приложения;
    Должен быть реализован обработчик ошибок с последующим логированием в отдельный файл;
    В случае потери сети предусмотреть функции восстановления соединения между приложениями;
    ПО должно осуществлять обмен данными с использованием стека протоколов TCP/IP;
    В качестве шифрования данных использовать криптографическую библиотеку OpenSSL.

Дополнительное задание:
Реализация собственного протокола.

Требования к протоколу:
    Протокол взаимодействует с TCP/IP;
    Использование сертификата безопасности (SSL сертификат);
    Сериализация и десериализация данных;
    Ограничение передаваемых данных до 10МБ;
    Защита от DDOS атак (фильтрация пакетов).

Введение понятийного аппарата:
Сообщениями являются структурированные данные, передаваемые от клиента серверу и обратно.

Тело сообщения состоит из:
    Идентификатор сообщения – число (uint64);
    Размер сообщения (uint64);
    Тело сообщения – любые данные, объемом до 10МБ.

В теле сообщения могут передаваться команды с параметрами.
При получении сообщения сервер распознаёт команду внутри тела сообщения, выполняет затребованное действие и отправляет ответное сообщение клиенту.

Тело сообщения может содержать команду запроса или данные, полученные из таблиц (файлов) хранилища. Данные в файлах записаны в формате JSON.

Структура файлов в формате JSON (пример):
[
    {"User": "Admin", "Name": "Ivan Ivanovich", "Group": ["Admin", "Worker"], "Department": "Programmer"},
    {"User": "Work", "Name": "Alexandr Alexandrovich", "Group": "Worker", "Department": "Driver"}
]

Работа с JSON осуществляется через библиотеку nlohmann/json.hpp.
Для тестовой реализации применить как минимум 3 таблицы с различным набором данных в формате JSON.

Команды, задаваемые в сообщениях:
Команда — запрос, отправленный серверу для получения и изменения данных.

Клиент отправляет сообщение с командой на сервер. Сервер обрабатывает полученный запрос и отправляет ответ клиенту, соответствующий отправленной команде.
    Формат отправляемых данных в теле сообщения — String в формате JSON.
    Формат получаемых данных в теле сообщения — String в формате JSON.

Для хранилища допустимы два варианта взаимодействия: чтение и запись.
Чтение должно позволять клиенту получать данные от сервера из выбранной таблицы. По запросу клиент может изменять значение параметров в выбранной таблице на сервере.

Реализовать набор команд (допустимы свои варианты команд):
    Получить список доступных таблиц хранилища;
    Получить список доступных кортежей в таблице хранилища;
    Получение данных из выбранной таблицы хранилища;
    Изменение данных в указанной таблице хранилища под указанным кортежем и значением;
    Проверка целостности данных в таблице хранилища на сервере.

Команды могут поддерживать указание дополнительных параметров.
Итоговый формат передаваемой команды должен выглядеть следующим образом:

Пример:
Command("Update", "JSON")

Где:
    "Update" - передаваемая команда;
    "JSON" - структура параметров в формате JSON.

Ответным сообщением сервер отправляет запрос вида:

Request("Value", "JSON")
    "Value" – значение запроса (данные хранилища или значение возникшей ошибки);
    "JSON" – данные хранилища или значение возникшей ошибки.

Опытные работы, тестирование:
    Создать виртуальную машину с одной из указанных ОС, развернуть на ней серверную часть ПО.
    Клиентское ПО устанавливается в рабочую ОС. Взаимодействие между виртуальной машиной и рабочей ОС – по локальной сети.

    На сервере расположить таблицы (хранилище данных) с некоторыми данными (например, список таблиц, настроек) в формате JSON.
    Данные из этой таблицы должны быть переданы по запросу клиента.
    В случае возникновения ошибки отправки данных с сервера клиенту возвращается сообщение с текстом исключения.
    При успешном обмене сообщениями клиент принимает данные от сервера и записывает их в файл.

Для отслеживания транспортировки сообщений можно использовать утилиту Wireshark (до использования OpenSSL).

Дополнительное задание:
Разработать на BM FreeBSD домен, принимающий пакеты с данными с основной машины.

Результат:
    Примеры работоспособности ПО;
    Исходный код разработанного ПО с комментариями;
    Отчет по проделанной работе.